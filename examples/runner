#!/usr/bin/env ruby

base_dir = File.dirname(__FILE__)

unless File.exists?(File.join(base_dir, '..', 'dist', 'ember-simple-wsse-auth.js'))
  puts "\n** dist/ember-simple-wsse-auth.js doesn't exist, building it first...\n\n"
  `cd .. && bundle && bundle exec rake dist`
end

require 'rubygems'
require 'bundler'

Bundler.require

# serves the main template (see bottom of this file)
get '/' do
  erb :index
end

# serve the dependency JS file from the /packages directory
get '/base64_encode.js' do
  File.read(File.join(base_dir, '..', 'packages/phpjs', 'base64_encode.js'))
end

# serve the JS file from the /dist directory
get '/ember-simple-wsse-auth.js' do
  File.read(File.join(base_dir, '..', 'dist', 'ember-simple-wsse-auth.js'))
end

# serve the HTML files from the respective example directoy
%w(1-simple 2-errors 3-authenticated-account 4-custom-response).each do |example|
  get "/#{example}" do
    erb File.read(File.join(base_dir, example, 'index.html'))
  end
end

# session creation endpoint; successfull if credentials are letme/in
get '/salt/:username' do
  if params[:username] == 'letme'
    [200, { 'Content-Type' => 'application/json' }, ['{ "session": { "salt": "thisIsMySalt", "username":"letme" } }']]
  else
    [422, { 'Content-Type' => 'application/json' }, ['{ "error": "invalid login" }']]
  end
end

get '/check-access' do
  
  if env['HTTP_AUTHORIZATION'] == 'Authorization profile="UsernameToken"' \
        && /Username=letme/.match(env['HTTP_X_WSSE']) \
        && /PasswordDigest=|YnZHI2jnwkDvIZhvinTOFSBrI\+FfaAuL2Pp4sdmYQhll\/5Hg1pQNP\/yZAxbrjRViRpk6qA+WOJphf8AtH0WUKQ==/.match(env['HTTP_X_WSSE']) \
        && /Nonce/.match(env['HTTP_X_WSSE']) \
        && /Created/.match(env['HTTP_X_WSSE'])
    [200, { 'Content-Type' => 'application/json' }, ['{ "success": "login successful" }']] 
  else
    [403, { 'Content-Type' => 'application/json' }, ['{ "error": "invalid credentials" }']]
  end
end

# posts endpoint; successful if a valid authentication token header is sent
get '/posts' do
  if env['HTTP_AUTHORIZATION'] == 'Authorization profile="UsernameToken"' \
        && /Username=letme/.match(env['HTTP_X_WSSE']) \
        && /PasswordDigest=YnZHI2jnwkDvIZhvinTOFSBrI\+FfaAuL2Pp4sdmYQhll\/5Hg1pQNP\/yZAxbrjRViRpk6qA+WOJphf8AtH0WUKQ==/.match(env['HTTP_X_WSSE']) \
        && /Nonce/.match(env['HTTP_X_WSSE']) \
        && /Created/.match(env['HTTP_X_WSSE'])
    [200, { 'Content-Type' => 'application/json' }, ['{ "posts": [{ "id": 1, "title": "first post", "body": "some content"}, { "id": 2, "title": "2nd post", "body": "some other body" }] }']]
  else
    [401, {}, ['']]
  end
end

__END__

@@ layout
<!DOCTYPE html>
<html>
  <head>
    <title>ember-simple-wsse-auth - examples</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css">
    <script src="http://code.jquery.com/jquery-1.9.1.js"></script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0/handlebars.js"></script>
    <script src="http://builds.emberjs.com/release/ember.js"></script>
    <script src="http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/sha512.js"></script>
    <script src="http://crypto-js.googlecode.com/svn/tags/3.1.2/build/components/enc-base64-min.js"></script>
    <script src="ember-simple-wsse-auth.js"></script>
  </head>
  <body style="padding-top: 50px;">
    <%= yield %>
    <% unless request.path_info == '/' %>
      <nav class="navbar navbar-default navbar-fixed-bottom">
        <div class="navbar-header">
          <a href="/" class="navbar-brand">&larr; back to examples list</a>
        </div>
      </nav>
    <% end %>
  </body>
</html>

@@ index
<div class="container">
  <div class="row">
    <div class="col-md-6 col-md-offset-3">
      <div class="list-group">
        <a href="/1-simple" class="list-group-item">
          <h4 class="list-group-item-heading">Simple example</h4>
          <p class="list-group-item-text">Simple example with only basic authnetication - no error handling, no data, no session account etc.</p>
        </a>
        <a href="/2-errors" class="list-group-item">
          <h4 class="list-group-item-heading">Example with error handling</h4>
          <p class="list-group-item-text">Simple example with error handling - still no data, no session account etc.</p>
        </a>
        <a href="/3-authenticated-account" class="list-group-item">
          <h4 class="list-group-item-heading">Example with session account</h4>
          <p class="list-group-item-text">Full-fledged example with error handling and handling of the authenticated account.</p>
        </a>
      </div>
    </div>
  </div>
</div>
<script>
  delete sessionStorage.authToken;
  delete sessionStorage.account;
</script>
